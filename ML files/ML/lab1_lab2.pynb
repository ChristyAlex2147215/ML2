{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"lab1&lab2.pynb","provenance":[],"mount_file_id":"1roFcj_xTZvd5CJiZsu_9vyldyFf_njKT","authorship_tag":"ABX9TyO9aBc7kytxSBoiR9aRzKwX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["%cd drive/MyDrive/ML_praticals/Datasets"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pRCwQ7hnRyIG","executionInfo":{"status":"ok","timestamp":1659501485831,"user_tz":-330,"elapsed":6,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"cffa3f40-2989-4ed0-f683-565ff31088de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/ML_praticals/Datasets\n"]}]},{"cell_type":"code","source":["!ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ug2uUlA29MzP","executionInfo":{"status":"ok","timestamp":1659502773326,"user_tz":-330,"elapsed":652,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"1417f136-a95a-4a12-ef39-4c8fd0ed4802"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" AirQualityUCI.xlsx  'archive (9).zip'\n"," AirQualityUCI.zip    archive.zip\n","'archive (10).zip'    city_day.csv\n","'archive (11).zip'    city_day.gsheet\n","'archive (12).zip'   'edited pollution index.xlsx'\n","'archive (13).zip'   'Latest Published Global Estimates (1751-2013).xlsx'\n","'archive (5).zip'     water_dataX.csv\n","'archive (6).zip'\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Se2YuT0t8TJo"},"outputs":[],"source":["import pandas as pd\n","import numpy as np"]},{"cell_type":"code","source":["import matplotlib.pyplot as mpt  "],"metadata":{"id":"QH3CyGUa9Azn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Water dataset Quality data set**"],"metadata":{"id":"GtEPVJOKAS3c"}},{"cell_type":"code","source":["data_set= pd.read_csv('water_dataX.csv',encoding='cp1252')  "],"metadata":{"id":"mJ0OWXCp8mFX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_set2=pd.read_csv()"],"metadata":{"id":"3ilSY-LHcGEN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_set"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"QikSzegsALiz","executionInfo":{"status":"ok","timestamp":1659501487137,"user_tz":-330,"elapsed":77,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"d5f2b16e-6191-4465-be3d-1a4bbdbc3925"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     STATION CODE                                          LOCATIONS  \\\n","0            1393               DAMANGANGA AT D/S OF MADHUBAN, DAMAN   \n","1            1399  ZUARI AT D/S OF PT. WHERE KUMBARJRIA CANAL JOI...   \n","2            1475                                ZUARI AT PANCHAWADI   \n","3            3181                        RIVER ZUARI AT BORIM BRIDGE   \n","4            3182                       RIVER ZUARI AT MARCAIM JETTY   \n","...           ...                                                ...   \n","1986         1330            TAMBIRAPARANI AT ARUMUGANERI, TAMILNADU   \n","1987         1450  PALAR AT VANIYAMBADI WATER SUPPLY HEAD WORK, T...   \n","1988         1403                 GUMTI AT U/S SOUTH TRIPURA,TRIPURA   \n","1989         1404                GUMTI AT D/S SOUTH TRIPURA, TRIPURA   \n","1990         1726   CHANDRAPUR, AGARTALA D/S OF HAORA RIVER, TRIPURA   \n","\n","            STATE  Temp D.O. (mg/l)   PH CONDUCTIVITY (µmhos/cm)  \\\n","0     DAMAN & DIU  30.6         6.7  7.5                     203   \n","1             GOA  29.8         5.7  7.2                     189   \n","2             GOA  29.5         6.3  6.9                     179   \n","3             GOA  29.7         5.8  6.9                      64   \n","4             GOA  29.5         5.8  7.3                      83   \n","...           ...   ...         ...  ...                     ...   \n","1986          NAN   NAN         7.9  738                     7.2   \n","1987          NAN    29         7.5  585                     6.3   \n","1988          NAN    28         7.6   98                     6.2   \n","1989          NAN    28         7.7   91                     6.5   \n","1990          NAN    29         7.6  110                     5.7   \n","\n","     B.O.D. (mg/l) NITRATENAN N+ NITRITENANN (mg/l)  \\\n","0              NAN                              0.1   \n","1                2                              0.2   \n","2              1.7                              0.1   \n","3              3.8                              0.5   \n","4              1.9                              0.4   \n","...            ...                              ...   \n","1986           2.7                            0.518   \n","1987           2.6                            0.155   \n","1988           1.2                              NAN   \n","1989           1.3                              NAN   \n","1990           1.1                              NAN   \n","\n","     FECAL COLIFORM (MPN/100ml) TOTAL COLIFORM (MPN/100ml)Mean  year  \n","0                            11                             27  2014  \n","1                          4953                           8391  2014  \n","2                          3243                           5330  2014  \n","3                          5382                           8443  2014  \n","4                          3428                           5500  2014  \n","...                         ...                            ...   ...  \n","1986                      0.518                            202  2003  \n","1987                      0.155                            315  2003  \n","1988                        NAN                            570  2003  \n","1989                        NAN                            562  2003  \n","1990                        NAN                            546  2003  \n","\n","[1991 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-d1fb3aa6-c951-4a3b-b41c-973b847956d0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATION CODE</th>\n","      <th>LOCATIONS</th>\n","      <th>STATE</th>\n","      <th>Temp</th>\n","      <th>D.O. (mg/l)</th>\n","      <th>PH</th>\n","      <th>CONDUCTIVITY (µmhos/cm)</th>\n","      <th>B.O.D. (mg/l)</th>\n","      <th>NITRATENAN N+ NITRITENANN (mg/l)</th>\n","      <th>FECAL COLIFORM (MPN/100ml)</th>\n","      <th>TOTAL COLIFORM (MPN/100ml)Mean</th>\n","      <th>year</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1393</td>\n","      <td>DAMANGANGA AT D/S OF MADHUBAN, DAMAN</td>\n","      <td>DAMAN &amp; DIU</td>\n","      <td>30.6</td>\n","      <td>6.7</td>\n","      <td>7.5</td>\n","      <td>203</td>\n","      <td>NAN</td>\n","      <td>0.1</td>\n","      <td>11</td>\n","      <td>27</td>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1399</td>\n","      <td>ZUARI AT D/S OF PT. WHERE KUMBARJRIA CANAL JOI...</td>\n","      <td>GOA</td>\n","      <td>29.8</td>\n","      <td>5.7</td>\n","      <td>7.2</td>\n","      <td>189</td>\n","      <td>2</td>\n","      <td>0.2</td>\n","      <td>4953</td>\n","      <td>8391</td>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1475</td>\n","      <td>ZUARI AT PANCHAWADI</td>\n","      <td>GOA</td>\n","      <td>29.5</td>\n","      <td>6.3</td>\n","      <td>6.9</td>\n","      <td>179</td>\n","      <td>1.7</td>\n","      <td>0.1</td>\n","      <td>3243</td>\n","      <td>5330</td>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3181</td>\n","      <td>RIVER ZUARI AT BORIM BRIDGE</td>\n","      <td>GOA</td>\n","      <td>29.7</td>\n","      <td>5.8</td>\n","      <td>6.9</td>\n","      <td>64</td>\n","      <td>3.8</td>\n","      <td>0.5</td>\n","      <td>5382</td>\n","      <td>8443</td>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3182</td>\n","      <td>RIVER ZUARI AT MARCAIM JETTY</td>\n","      <td>GOA</td>\n","      <td>29.5</td>\n","      <td>5.8</td>\n","      <td>7.3</td>\n","      <td>83</td>\n","      <td>1.9</td>\n","      <td>0.4</td>\n","      <td>3428</td>\n","      <td>5500</td>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1986</th>\n","      <td>1330</td>\n","      <td>TAMBIRAPARANI AT ARUMUGANERI, TAMILNADU</td>\n","      <td>NAN</td>\n","      <td>NAN</td>\n","      <td>7.9</td>\n","      <td>738</td>\n","      <td>7.2</td>\n","      <td>2.7</td>\n","      <td>0.518</td>\n","      <td>0.518</td>\n","      <td>202</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>1987</th>\n","      <td>1450</td>\n","      <td>PALAR AT VANIYAMBADI WATER SUPPLY HEAD WORK, T...</td>\n","      <td>NAN</td>\n","      <td>29</td>\n","      <td>7.5</td>\n","      <td>585</td>\n","      <td>6.3</td>\n","      <td>2.6</td>\n","      <td>0.155</td>\n","      <td>0.155</td>\n","      <td>315</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>1988</th>\n","      <td>1403</td>\n","      <td>GUMTI AT U/S SOUTH TRIPURA,TRIPURA</td>\n","      <td>NAN</td>\n","      <td>28</td>\n","      <td>7.6</td>\n","      <td>98</td>\n","      <td>6.2</td>\n","      <td>1.2</td>\n","      <td>NAN</td>\n","      <td>NAN</td>\n","      <td>570</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>1989</th>\n","      <td>1404</td>\n","      <td>GUMTI AT D/S SOUTH TRIPURA, TRIPURA</td>\n","      <td>NAN</td>\n","      <td>28</td>\n","      <td>7.7</td>\n","      <td>91</td>\n","      <td>6.5</td>\n","      <td>1.3</td>\n","      <td>NAN</td>\n","      <td>NAN</td>\n","      <td>562</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>1990</th>\n","      <td>1726</td>\n","      <td>CHANDRAPUR, AGARTALA D/S OF HAORA RIVER, TRIPURA</td>\n","      <td>NAN</td>\n","      <td>29</td>\n","      <td>7.6</td>\n","      <td>110</td>\n","      <td>5.7</td>\n","      <td>1.1</td>\n","      <td>NAN</td>\n","      <td>NAN</td>\n","      <td>546</td>\n","      <td>2003</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1991 rows × 12 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1fb3aa6-c951-4a3b-b41c-973b847956d0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d1fb3aa6-c951-4a3b-b41c-973b847956d0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d1fb3aa6-c951-4a3b-b41c-973b847956d0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["#Taking water purity from kerala"],"metadata":{"id":"174z68RuFKZY"}},{"cell_type":"code","source":["kerala=data_set[data_set[\"STATE\"]==\"KERALA\"]"],"metadata":{"id":"KUrSYhUsAfsU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Printng all the location from kerala data is collected"],"metadata":{"id":"qsM9IDqkOX5W"}},{"cell_type":"code","source":["locations = kerala['LOCATIONS']\n","for i in locations:\n","    print(i)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3hf5SyioGfAg","executionInfo":{"status":"ok","timestamp":1659501487141,"user_tz":-330,"elapsed":76,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"1b45e4f6-0e93-4cae-8426-2565abe80af5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ACHENKOIL AT THUMPAMON, KERALA\n","ACHENKOIL AT CHENNITHULA, KERALA\n","ACHENKOIL AT KALLARAKADAVU, PATHANAMTHITTA\n","ACHENKOIL AT PANDALAM (NEAR AYYAPPA TEMPLE), PATHANAMTHITTA\n","R ANCHARAKANDY AT MERUVAMBA\n","R ANCHARAKANDY AT MERUVAMBA\n","R AYROOR AT AYROOR BRIDGE\n","R BHARATHAPUZHA AT KUTTIPPURAM\n","R BHARATHAPUZHA AT PATTAMBI\n","CHALAKUDY AT PULICKALKANANDAVU, KERALA\n","CHALIYAR AT KOOLIMADU, KERALA\n","CHALIYAR AT CHUNGAPALLY, KERALA\n","CHALIYAR AT NILAMBUR, MALAPPURAM\n","CHANDRAGIRI AT PADIYATHADKA, KERALA\n","CHITRAPUZHA AT IRUMPANAM, KERALA\n","R CORAPUZHA AT KANAYANKODE\n","R ITHIKKARA AT AYUR, KERALA\n","R ITHIKKARA AT ITHIKKARA\n","R KADALUNDI AT THIRURANGADY, KERALA\n","R KADALUNDI AT HAJIRAPPALLY\n","R KADAMBAYAR AT BRAHMAPURAM\n","R KADAMBAYAR AT MANCKAKADAVU\n","KALLADA AT PERUMTHOTTAMKADAVU, PUNALOOR, KERALA\n","R KALLAI AT KALLAI BRIDGE\n","KALPATHI PUZHA AT KALPATHI, PALAKKAD\n","KARAPUZHA DAM AT WAYANAD\n","R KARINGODE AT KAKKADAVU,  KERALA\n","KARAMANA AT MOONNATTUMUKKU, KERALA\n","RIVER KARAMANA AT ARUVIKARA, THIRUVANANTHAPURAM\n","R KARUVANNURR AT KARUVANNUR BRIDGE\n","R KAVVAI AT KUTTIYOL PALAM\n","R KEECHERI AT VADAKKANCHERY BRIDGE\n","R KORAYAR AT KANJIKODE\n","R KUPPAM AT THALIPARAMBA, KERALA\n","R KUPPAM AT RAYAROM\n","R KUTTIYADE AT KUTTIYADY ESTATE, KERALA\n","R MAHE AT VALAYAM, KERALA\n","R MAMOM AT MAMOM BRIDGE\n","MANIMALA  AT KALLOOPARA, KERALA\n","MANIMALA AT THONDRA, KERALA\n","MANIYANKODE PUZHA AT MANIYANKODE BRIDGE, WAYANAD\n","R MANJESWAR AT BAJRAKKARA BR.\n","MEENACHIL AT KIDANGOOR, KERALA\n","R MOGRAL AT MOGRAL BR.\n","MUVATTAPUZHA AT VETTIKKATTUMUKKU, KERALA\n","R NEELASWARAM AT NAMBIARKAL DAM\n","R NEELESWARAM AT HOSDURG, KERALA\n","R NEYYAR AT AMARAVILA, KERALA\n","R NEYYAR AT ARUVIPURAM\n","R PALLICKAL AT NELLIMUKAL\n","PAMBA AT CHENGANNUR, KERALA\n","PAMBA AT THAKAZHY, KERALA\n","PAMBA DOWN, KERALA\n","PERIYAR NEAR ALWAYENANELOOR, KERALA\n","PERIYAR AT KALADY, KERALA\n","PERIYAR AT SEWAGE DISCHARGE POINT, KERALA\n","RIVER PERIYAR AT MUPPATHADAM\n","RIVER PERIYAR AT PATHALAM\n","R PERIYAR AT KALAMASSERY\n","R PERIYAR AT PURAPPALLIKAVU\n","PERIYAR AT KWA INTAKENAN ALUVA, ERNAKULAM\n","R PERUVAMBA AT CHANDAPPURA\n","R PULLUR AT PULLUR BR.\n","R PUZHACKAL AT PUZHACKAL BRIDGE\n","R RAMAPURAM AT RAMAPURAM BRIDGE\n","R SHRIYA AT ANGADIMOGARU\n","R THALLASSERY AT PATHIPPALAM\n","R THIRUR AT THALAKKADATHUR BRIDGE\n","R UPPALA AT  UPPALA BR.\n","RIVER VALAPATTANAM AT PARASSINIKADAVU, KANNUR\n","VAMANAPURAM, KERALA\n","ACHENKOIL AT THUMPAMON, KERALA\n","ACHENKOIL AT CHENNITHULA, KERALA\n","ACHENKOIL AT KALLARAKADAVU, PATHANAMTHITTA\n","ACHENKOIL AT PANDALAM (NEAR AYYAPPA TEMPLE), PATHANAMTHITTA\n","R ANCHARAKANDY AT MERUVAMBA\n","R ANCHARAKANDY AT MERUVAMBA\n","R AYROOR AT AYROOR BRIDGE\n","R BHARATHAPUZHA AT KUTTIPPURAM\n","R BHARATHAPUZHA AT PATTAMBI\n","CHALAKUDY AT PULICKALKANANDAVU, KERALA\n","CHALIYAR AT KOOLIMADU, KERALA\n","CHALIYAR AT CHUNGAPALLY, KERALA\n","CHALIYAR AT NILAMBUR, MALAPPURAM\n","CHANDRAGIRI AT PADIYATHADKA, KERALA\n","CHITRAPUZHA AT IRUMPANAM, KERALA\n","R CORAPUZHA AT KANAYANKODE\n","R ITHIKKARA AT AYUR, KERALA\n","R ITHIKKARA AT ITHIKKARA\n","R KADALUNDI AT THIRURANGADY, KERALA\n","R KADALUNDI AT HAJIRAPPALLY\n","R KADAMBAYAR AT BRAHMAPURAM\n","R KADAMBAYAR AT MANCKAKADAVU\n","KALLADA AT PERUMTHOTTAMKADAVU, PUNALOOR, KERALA\n","R KALLAI AT KALLAI BRIDGE\n","KALPATHI PUZHA AT KALPATHI, PALAKKAD\n","KARAPUZHA DAM AT WAYANAD\n","R KARINGODE AT KAKKADAVU,  KERALA\n","KARAMANA AT MOONNATTUMUKKU, KERALA\n","RIVER KARAMANA AT ARUVIKARA, THIRUVANANTHAPURAM\n","R KARUVANNURR AT KARUVANNUR BRIDGE\n","R KAVVAI AT KUTTIYOL PALAM\n","R KEECHERI AT VADAKKANCHERY BRIDGE\n","R KORAYAR AT KANJIKODE\n","R KUPPAM AT THALIPARAMBA, KERALA\n","R KUPPAM AT RAYAROM\n","R KUTTIYADE AT KUTTIYADY ESTATE, KERALA\n","R MAHE AT VALAYAM, KERALA\n","R MAMOM AT MAMOM BRIDGE\n","MANIMALA  AT KALLOOPARA, KERALA\n","MANIMALA AT THONDRA, KERALA\n","MANIYANKODE PUZHA AT MANIYANKODE BRIDGE, WAYANAD\n","R MANJESWAR AT BAJRAKKARA BR.\n","MEENACHIL AT KIDANGOOR, KERALA\n","R MOGRAL AT MOGRAL BR.\n","MUVATTAPUZHA AT VETTIKKATTUMUKKU, KERALA\n","R NEELASWARAM AT NAMBIARKAL DAM\n","R NEELESWARAM AT HOSDURG, KERALA\n","R NEYYAR AT AMARAVILA, KERALA\n","R NEYYAR AT ARUVIPURAM\n","R PALLICKAL AT NELLIMUKAL\n","PAMBA AT CHENGANNUR, KERALA\n","PAMBA AT THAKAZHY, KERALA\n","PAMBA DOWN, KERALA\n","PERIYAR NEAR ALWAYENANELOOR, KERALA\n","PERIYAR AT KALADY, KERALA\n","PERIYAR AT SEWAGE DISCHARGE POINT, KERALA\n","RIVER PERIYAR AT MUPPATHADAM\n","RIVER PERIYAR AT PATHALAM\n","R PERIYAR AT KALAMASSERY\n","R PERIYAR AT PURAPPALLIKAVU\n","PERIYAR AT KWA INTAKENAN ALUVA, ERNAKULAM\n","R PERUVAMBA AT CHANDAPPURA\n","R PULLUR AT PULLUR BR.\n","R PUZHACKAL AT PUZHACKAL BRIDGE\n","R RAMAPURAM AT RAMAPURAM BRIDGE\n","R SHRIYA AT ANGADIMOGARU\n","R THALLASSERY AT PATHIPPALAM\n","R THIRUR AT THALAKKADATHUR BRIDGE\n","R UPPALA AT  UPPALA BR.\n","RIVER VALAPATTANAM AT PARASSINIKADAVU, KANNUR\n","VAMANAPURAM, KERALA\n","ACHENKOIL AT THUMPAMON\n","ACHENKOIL AT CHENNITHULA\n","ACHENKOIL AT KALLARAKADAVU, PATHANAMTHITTA\n","ACHENKOIL AT PANDALAM (NEAR AYYAPPA TEMPLE),PATHANAMTHITTA\n","ANCHARAKANDY AT MERUVAMBA\n","ANCHARAKANDY AT MERUVAMBA\n","R AYROOR AT AYROOR BRIDGE\n","BHARATHAPUZHA AT KUTTIPPURAM\n","R BHARATHAPUZHA AT PATTAMBI\n","CHALAKUDY AT PULICKALKANANDAVU\n","CHALIYAR AT KOOLIMADU\n","CHALIYAR AT CHUNGAPALLY\n","CHALIYAR AT NILAMBUR, MALAPPURAM\n","CHANDRAGIRI AT PADIYATHADKA\n","CHITRAPUZHA AT IRUMPANAM\n","R CORAPUZHA AT KANAYANKODE\n","R ITHIKKARA AT AYUR, KERALA\n","R ITHIKKARA AT ITHIKKARA\n","R KADALUNDI AT THIRURANGADY\n","R KADALUNDI AT HAJIRAPPALLY\n","KADAMBAYAR AT BRAHMAPURAM\n","KADAMBAYAR AT MANCKAKADAVU\n","KALLADA AT PERUMTHOTTAM KADAVU, PUNALOOR\n","R KALLAI AT KALLAI BRIDGE\n","KALPATHI PUZHA AT KALPATHI, PALAKKAD\n","KARAPUZHA DAM AT WAYANAD\n","R KARINGODE AT KAKKADAVU\n","KARAMANA AT MOONNATTUMUKKU\n","RIVER KARAMANA AT ARUVIKARA, THIRUVANANTHAPURAM\n","R KARUVANNURR AT KARUVANNUR BRIDGE\n","R KAVVAI AT KUTTIYOL PALAM\n","KEECHERI AT VADAKKANCHERY BDG\n","R KORAYAR AT KANJIKODE\n","R KUPPAM AT THALIPARAMBA\n","R KUPPAM AT RAYAROM\n","R KUTTIYADE AT KUTTIYADY ESTATE\n","R MAHE AT VALAYAM, KERALA\n","R MAMOM AT MAMOM BRIDGE\n","MANIMALA  AT KALLOOPARA\n","MANIMALA AT THONDRA\n","MANIYANKODE PUZHA AT MANIYANKODE BRIDGE, WAYANAD\n","R MANJESWAR AT BAJRAKKARA BR.\n","MEENACHIL AT KIDANGOOR\n","R MOGRAL AT MOGRAL BR.\n","MUVATTAPUZHA AT VETTIKKATTUMUKKU\n","NEELASWARAM AT NAMBIARKAL \n","R NEELESWARAM AT HOSDURG\n","R NEYYAR AT AMARAVILA\n","R NEYYAR AT ARUVIPURAM\n","R PALLICKAL AT NELLIMUKAL\n","PAMBA AT CHENGANNUR\n","PAMBA AT THAKAZHY\n","PAMBA DOWN\n","PERIYAR NEAR ALWAYENANELOOR\n","PERIYAR AT KALADY\n","PERIYAR AT SEWAGE DISCHARGE POINT\n","PERIYAR AT MUPPATHADAM\n","RIVER PERIYAR AT PATHALAM\n","R PERIYAR AT KALAMASSERY\n","R PERIYAR AT PURAPPALLIKAVU\n","PERIYAR AT KWA INTAKENAN ALUVA, ERNAKULAM\n","PERUVAMBA AT CHANDAPPURA\n","R PULLUR AT PULLUR BR.\n","R PUZHACKAL AT PUZHACKAL BRIDGE\n","R RAMAPURAM AT RAMAPURAM BRIDGE\n","R SHRIYA AT ANGADIMOGARU\n","THALLASSERY AT PATHIPPALAM\n","THIRUR AT THALAKKADATHUR BDG\n","R UPPALA AT  UPPALA BR.\n","RIVER VALAPATTANAM AT PARASSINIKADAVU, KANNUR\n","VAMANAPURAM\n","ACHENKOIL AT THUMPAMON\n","ACHENKOIL AT CHENNITHULA\n","R ANCHARAKANDY AT MERUVAMBA\n","R ANCHARAKANDY AT MERUVAMBA\n","R AYROOR AT AYROOR BRIDGE\n","R BHARATHAPUZHA AT KUTTIPPURAM\n","R BHARATHAPUZHA AT PATTAMBI\n","CHALAKUDY AT PULICKALKANANDAVU\n","CHALIYAR AT KOOLIMADU, KERALA\n","CHALIYAR AT CHUNGAPALLY\n","CHANDRAGIRI AT PADIYATHADKA\n","CHITTHRAPUZHA AT IRUMPANAM\n","R CORAPUZHA AT KANAYANKODE\n","ITHIKKARA AT AYUR, KERALA\n","R ITHIKKARA AT ITHIKKARA\n","KADALUNDY AT THIRURANGADY\n","R KADALUNDI AT HAJIRAPPALLY\n","R KADAMBAYAR AT BRAHMAPURAM\n","R KADAMBAYAR AT MANCKAKADAVU\n","KALLADA AT PERUMTHOTTAM KADAVU, PUNALOOR, KERALA\n","R KALLAI AT KALLAI BRIDGE\n","KARINGODE AT KAKKADAVU\n","KARAMANA AT MOONNATTUMUKKU\n","R KARUVANNURR AT KARUVANNUR BRIDGE\n","R KAVVAI AT KUTTIYOL PALAM\n","R KEECHERI AT VADAKKANCHERY BRIDGE\n","R KORAYAR AT KANJIKODE\n","R KUPPAM AT THALIPARAMBA\n","R KUPPAM AT RAYAROM\n","R KUTTIYADY AT  KUTTIYADY ESTATE\n","R MAHE AT VALAYAM, KERALA\n","R MAMOM AT MAMOM BRIDGE\n","MANIMALA  AT KALLOOPARA,\n","MANIMALA AT THONDRA, KERALA\n","R MANJESWAR AT BAJRAKKARA BR.\n","MEENACHIL AT KIDANGOOR, KERALA\n","R MOGRAL AT MOGRAL BR.\n","MUVATTAPUZHA AT VETTIKKATTUMUKKU, KERALA\n","R NEELASWARAM AT NAMBIARKAL DAM\n","R NEELASWARAM AT HOSDURG\n","R NEYYAR AT AMARAVILA, KERALA\n","R NEYYAR AT ARUVIPURAM\n","R PALLICKAL AT NELLIMUKAL\n","PAMBA AT CHENGANNUR, KERALA\n","PAMBA AT THAKAZHY, KERALA\n","PAMBA DOWN, KERALA\n","PERIYAR NEAR ALWAYENANELOOR\n","PERIYAR AT KALADY, KERALA\n","PERIYAR AT SEWAGE DISCHARGE POINT, KERALA\n","RIVER PERIYAR AT MUPPATHADAM\n","RIVER PERIYAR AT PATHALAM\n","R PERIYAR AT KALAMASSERY\n","R PERIYAR AT PURAPPALLIKAVU\n","R PERUVAMBA AT CHANDAPPURA\n","R PULLUR AT PULLUR BR.\n","R PUZHACKAL AT PUZHACKAL BRIDGE\n","R RAMAPURAM AT RAMAPURAM BRIDGE\n","R SHRIYA AT ANGADIMOGARU\n","R THALLASSERY AT PATHIPPALAM\n","R THIRUR AT THALAKKADATHUR BRIDGE\n","R UPPALA AT  UPPALA BR.\n","VAMANAPURAM, KERALA\n"]}]},{"cell_type":"code","source":["locations_list=locations.to_list\n","locations"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9kD3VsYPHFLA","executionInfo":{"status":"ok","timestamp":1659501487142,"user_tz":-330,"elapsed":69,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"634b57f6-f7b2-47cf-c3d0-c97b398a9d53"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["65                        ACHENKOIL AT THUMPAMON, KERALA\n","66                      ACHENKOIL AT CHENNITHULA, KERALA\n","67            ACHENKOIL AT KALLARAKADAVU, PATHANAMTHITTA\n","68     ACHENKOIL AT PANDALAM (NEAR AYYAPPA TEMPLE), P...\n","69                           R ANCHARAKANDY AT MERUVAMBA\n","                             ...                        \n","928                             R SHRIYA AT ANGADIMOGARU\n","929                         R THALLASSERY AT PATHIPPALAM\n","930                    R THIRUR AT THALAKKADATHUR BRIDGE\n","931                              R UPPALA AT  UPPALA BR.\n","932                                  VAMANAPURAM, KERALA\n","Name: LOCATIONS, Length: 275, dtype: object"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["for i in locations_list:\n","    print(i+\":\"+locations_list.count(i))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":182},"id":"EKd5cI9mHjDh","executionInfo":{"status":"error","timestamp":1659501487523,"user_tz":-330,"elapsed":431,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"eacfcccf-9a83-48aa-e234-ef3fc3467a75"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-a67cb18a93f9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlocations_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m\":\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mlocations_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'method' object is not iterable"]}]},{"cell_type":"markdown","source":["#table headers"],"metadata":{"id":"vcS3HAkXBe8o"}},{"cell_type":"code","source":["headers=data_set.columns\n","headers"],"metadata":{"id":"xfIKgAGqAbxn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[""],"metadata":{"id":"7I3j3tEeBiOX"}},{"cell_type":"markdown","source":["#plotting bar for water purity in kerala"],"metadata":{"id":"_W6fAb63FEPQ"}},{"cell_type":"markdown","source":["A bar chart is used when you want to show a distribution of data points or perform a comparison of metric values across different subgroups of your data"],"metadata":{"id":"6o1YzULwPKs_"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt"],"metadata":{"id":"EFiNMhHzFvfT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["locations = kerala['LOCATIONS']\n","ph = kerala['PH']\n"," \n","# Figure Size\n","fig = plt.figure(figsize =(40,30))\n"," \n","# Horizontal Bar Plot\n","plt.bar(locations[0:10], ph[0:10])\n"," \n","# Show Plot\n","plt.show()"],"metadata":{"id":"wYDpLSZzFCxA","executionInfo":{"status":"ok","timestamp":1659510683388,"user_tz":-330,"elapsed":1423,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"colab":{"base_uri":"https://localhost:8080/","height":833},"outputId":"35a1088b-520d-4b3c-f037-b8fdb8c9fc50"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2880x2160 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["locations"],"metadata":{"id":"UBYBiCt0EbYB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"rK5Z4uhLGNhx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#sidewise ploat of values"],"metadata":{"id":"fWXJYXaxIFBD"}},{"cell_type":"code","source":["locations = kerala['LOCATIONS']\n","ph = kerala['PH']\n"," \n","# Figure Size\n","fig, ax = plt.subplots(figsize =(6,9))\n"," \n","# Horizontal Bar Plot\n","ax.barh(locations[1:20], ph[1:20])\n"," \n","# Remove axes splines\n","for s in ['top', 'bottom', 'left', 'right']:\n","    ax.spines[s].set_visible(False)\n"," \n","# Remove x, y Ticks\n","ax.xaxis.set_ticks_position('none')\n","ax.yaxis.set_ticks_position('none')\n"," \n","# Add padding between axes and labels\n","ax.xaxis.set_tick_params(pad = 2)\n","ax.yaxis.set_tick_params(pad = 10)\n"," \n","# Add x, y gridlines\n","ax.grid(b = True, color ='grey',\n","        linestyle ='-.', linewidth = 0.5,\n","        alpha = 0.2)\n"," \n","# Show top values\n","ax.invert_yaxis()\n"," \n","# Add annotation to bars\n","for i in ax.patches:\n","    plt.text(i.get_width()+0.2, i.get_y()+0.5,\n","             str(round((i.get_width()), 2)),\n","             fontsize = 10, fontweight ='bold',\n","             color ='grey')\n"," \n","# Add Plot Title\n","ax.set_title('Water quality in state of kerala',\n","             loc ='left', )\n"," \n","# # Add Text watermark\n","# fig.text(0.9, 0.15, 'Jeeteshgavande30', fontsize = 12,\n","#          color ='grey', ha ='right', va ='bottom',\n","#          alpha = 0.7)\n"," \n","# Show Plot\n","plt.show()"],"metadata":{"id":"qz0KChBNILqw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"x6Ym6WS4Mbps"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#BoX ploat"],"metadata":{"id":"lowIiUhkMjaK"}},{"cell_type":"markdown","source":["Box plots provide a visual summary of the data with which we can quickly \n","identify the average value of the data, how dispersed the data is, whether the data is skewed or not (skewness).\n","  The Median gives you the average value of the data.\n","Box Plots shows Skewness of the data.\n","  The dispersion or spread of data can be visualized by the minimum and maximum values which are found at the end of the whiskers.\n","  The Box plot gives us the idea of about the Outliers which are the points which are numerically distant from the rest of the data."],"metadata":{"id":"XyFns5mhPvSW"}},{"cell_type":"code","source":["phh=ph.astype('float')\n","fig,ax = plt.subplots()\n","ax.boxplot(phh,vert=0)\n","plt.show()"],"metadata":{"id":"MIebq_DHMnYN","executionInfo":{"status":"ok","timestamp":1659510768628,"user_tz":-330,"elapsed":488,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"colab":{"base_uri":"https://localhost:8080/","height":265},"outputId":"8523f082-6f6f-4eda-de8d-2f0474466d59"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Map function"],"metadata":{"id":"URuqYJw1PW93"}},{"cell_type":"markdown","source":[" function returns a map object(which is an iterator) of the results after applying the given function to each item of a given iterable (list, tuple etc.)\n","\n","Syntax :\n","\n","map(fun, iter)"],"metadata":{"id":"cux_nrPoQNq1"}},{"cell_type":"code","source":["def fun(x):\n","  if x==0:\n","    return np.mean(numbers)\n","numbers =[1,2,3,4,0,5,6]\n","result = map(fun, numbers)\n","print(list(result))"],"metadata":{"id":"yxIYctvVPZ-H"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Rename()"],"metadata":{"id":"aZtFQbuYREr_"}},{"cell_type":"markdown","source":["Used to rename a column name "],"metadata":{"id":"9muFcG4GQkaw"}},{"cell_type":"code","source":["kerala"],"metadata":{"id":"k2jmsWOXRH_P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create New DataFrame of Specific column by DataFrame.assign() method.\n","df2 = data_set[[\"STATE\",\"PH\"]].copy()\n","print(df2)\n"],"metadata":{"id":"ep45lSUbSBII"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df2.rename(columns = {'STATE':'STATE_NAME'}, inplace = True)"],"metadata":{"id":"B-QkfH6SRdk5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Groupby()"],"metadata":{"id":"tFyWFOgeUZ0j"}},{"cell_type":"markdown","source":[" we use groupby () function this function is used to split the data into groups based on some criteria. "],"metadata":{"id":"JE3qXHOGQ_Qu"}},{"cell_type":"code","source":["groupby_place=kerala.groupby(\"LOCATIONS\")\n","groupby_place.first()\n"],"metadata":{"id":"JKxbUk41Ued7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#5. Bar()"],"metadata":{"id":"BFakHCkiVo3x"}},{"cell_type":"code","source":[""],"metadata":{"id":"SvpOfjNYWYOT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#6. Barh()"],"metadata":{"id":"lQMYMQz8WUa7"}},{"cell_type":"markdown","source":["#7. Histplot()\n"],"metadata":{"id":"cFQ7RC6ZVtb6"}},{"cell_type":"markdown","source":["A histogram is basically used to represent data provided in a form of some **groups**.It is accurate method for the graphical representation of numerical data distribution.It is a type of bar plot where X-axis represents the bin ranges while Y-axis gives information about frequency. Creating a Histogram"],"metadata":{"id":"B1u9662kRErY"}},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","tn=data_set[data_set[\"STATE\"]==\"TAMILNADU\"]\n","# to ignore the warnings \n","from warnings import filterwarnings\n","sns.set_style('whitegrid')\n","sns.distplot(tn['PH'], kde = False, color ='red', bins = 30)\n"],"metadata":{"id":"ldkltDeLVxh6","executionInfo":{"status":"error","timestamp":1659511343495,"user_tz":-330,"elapsed":611,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"colab":{"base_uri":"https://localhost:8080/","height":501},"outputId":"7cba801d-77d3-4f44-b5f0-c2206e035cfc"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3360\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3361\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'STATE'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-95-135f2ab37ca8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mseaborn\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mtn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata_set\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdata_set\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"STATE\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m\"TAMILNADU\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;31m# to ignore the warnings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mwarnings\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfilterwarnings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3456\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3457\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3458\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3459\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3460\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3361\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3363\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhasnans\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'STATE'"]}]},{"cell_type":"markdown","source":["#8. Pairplot()---No"],"metadata":{"id":"bOleE-6PWLD5"}},{"cell_type":"markdown","source":["Pairplot visualization comes handy when you want to go for Exploratory data analysis (“EDA”).\n","\n","Pairplot visualizes given data to find the relationship between them where the variables can be continuous or categorical.\n","Plot pairwise relationships in a data-set."],"metadata":{"id":"MzuD5xWPRnuy"}},{"cell_type":"code","source":["tn=data_set[data_set[\"STATE\"]==\"TAMILNADU\"].copy()\n","tn"],"metadata":{"id":"3gNLQD-uYaBi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tn_ph=tn[\"PH\"].copy()"],"metadata":{"id":"R8St6R4RZUwj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n","\n","sns.set(style=\"ticks\", color_codes=True)\n","iris = sns.load_dataset('water_dataX.csv')\n","g = sns.pairplot()\n","\n","import matplotlib.pyplot as plt\n","plt.show()"],"metadata":{"id":"ddN75O5hYIS0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#9. Distplot()\n"],"metadata":{"id":"JhoTTq75VzTj"}},{"cell_type":"markdown","source":["Displot It is used basically for univariant set of observations and visualizes it through a histogram i.e. only one observation and hence we choose one particular column of the dataset."],"metadata":{"id":"MP0cY1swR525"}},{"cell_type":"code","source":["\n","\n","\n","\n","plot=sns.distplot(kerala.PH,kde=False,color=\"b\")"],"metadata":{"id":"rkoMDi0_a58a"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#10. Jointplot()\n"],"metadata":{"id":"oKcxYGc5V1xq"}},{"cell_type":"markdown","source":["Draw a plot of two variables with bivariate and univariate graphs. This function provides a convenient interface to the ‘JointGrid’ class, with several canned plot kinds. This is intended to be a fairly lightweight wrapper; if you need more flexibility, you should use :class:’JointGrid’ directly."],"metadata":{"id":"jpKOpO1vSugH"}},{"cell_type":"code","source":["sns.jointplot(Kerala.locations,phh, data=kerala,kind='kde')"],"metadata":{"id":"xDySH9C_bh-o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# importing required packages\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","  \n","# loading dataset\n","data = sns.load_dataset(\"attention\")\n","  \n","# draw jointplot with\n","# hex kind\n","sns.jointplot(x = \"solutions\", y = \"score\",\n","              kind = \"hex\", data = data)\n","# show the plot\n","plt.show()\n","  \n","# This code is contributed \n","# by Deepanshu Rustagi."],"metadata":{"id":"bWebE2g5ckPJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#11. Stripplot()\n"],"metadata":{"id":"ktFiTrXJV50h"}},{"cell_type":"markdown","source":["A strip plot is drawn on its own. It is a good complement to a boxplot or violinplot in cases where all observations are shown along with some representation of the underlying distribution. It is used to draw a scatter plot based on the category."],"metadata":{"id":"wO-_oahVTHyV"}},{"cell_type":"code","source":["sns.stripplot(x=\"LOCATIONS\",y=\"PH\",data=kerala) "],"metadata":{"id":"HRRjtuZUeFNK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#12. Violinplot()\n"],"metadata":{"id":"AIFCsfpfV7sJ"}},{"cell_type":"markdown","source":["Violin plots are used when you want to observe the distribution of numeric data, and are especially useful when you want to make a comparison of distributions between multiple groups. The peaks, valleys, and tails of each group’s density curve can be compared to see where groups are similar or different."],"metadata":{"id":"kno5LKmXTJzZ"}},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize =(9, 7))\n","sns.violinplot( ax = ax, y = kerala[\"PH\"].astype('float'))"],"metadata":{"id":"-VjakVkLe24y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#13. Heatmap()\n"],"metadata":{"id":"J2gJfJIUV92J"}},{"cell_type":"markdown","source":["A heat map (or heatmap) is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions. The variation in color may be by hue or intensity"],"metadata":{"id":"_ECCkOkXUwYA"}},{"cell_type":"code","source":["int(\"5.6\".format)"],"metadata":{"id":"Dv8Qzgmwdi7v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df3=pd.read_csv('water_dataX.csv',encoding='cp1252').dropna()\n","liss=[float(i) for i in df3[\"PH\"].head(200)]\n"],"metadata":{"id":"O5hxA2fibqmY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# importing the modules\n","import numpy as np\n","import seaborn as sn\n","import matplotlib.pyplot as plt\n","  \n","# generating 2-D 10x10 matrix of random numbers\n","# from 1 to 100\n","data = np.asarray(liss).reshape(200,1)\n","# plotting the heatmap\n","hm = sn.heatmap(data)\n","  \n","# displaying the plotted heatmap\n","plt.show()"],"metadata":{"id":"2ptd0EROf2fR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"2QsJFqUIf1v6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#14. Scatter()\n"],"metadata":{"id":"fDTaMw9wV_iB"}},{"cell_type":"markdown","source":["\n","\n","Scatter charts are useful when one needs to represent the correlation between large data.\n","It is a useful tool for deriving the correlation between two variables.\n","It is considered an apt method to show the non-linear relationship in data.\n","\n"],"metadata":{"id":"2Mb1gNe2VFzg"}},{"cell_type":"code","source":["kerala"],"metadata":{"id":"zReps4XhXCM5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_set"],"metadata":{"id":"eK41STi1aMXl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#importing library\n","import matplotlib.pyplot as plt\n","#datasets\n","kerala1=kerala.head(15)\n","students_id = kerala1[\"PH\"]\n","students_marks = kerala1[\"Temp\"]\n","#scatter plot for the dataset\n","plt.scatter(students_marks,students_id)\n","plt.show()"],"metadata":{"id":"kqua-tFAPVXX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#15. Pie()\n"],"metadata":{"id":"K3A2Pkw0WEG6"}},{"cell_type":"markdown","source":["It is not suitable to use pie charts to compare between different parts, instead, it should be used for showing the relationship between partial and overall elements"],"metadata":{"id":"Xw132n5OVcV1"}},{"cell_type":"code","source":["\n","# Import libraries\n","from matplotlib import pyplot as plt\n","import numpy as np"],"metadata":{"id":"LHvtdOmDQBaH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cars=[x for x in kerala['LOCATIONS'].head(7)]\n","data=[c for c in kerala['PH'].head(7)]\n","print(cars)\n","print(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dOCeJfwMAydN","executionInfo":{"status":"ok","timestamp":1659501910683,"user_tz":-330,"elapsed":5,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"cb3dc532-603d-4518-f5d4-955d0beb7ed5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['ACHENKOIL AT THUMPAMON, KERALA', 'ACHENKOIL AT CHENNITHULA, KERALA', 'ACHENKOIL AT KALLARAKADAVU, PATHANAMTHITTA', 'ACHENKOIL AT PANDALAM (NEAR AYYAPPA TEMPLE), PATHANAMTHITTA', 'R ANCHARAKANDY AT MERUVAMBA', 'R ANCHARAKANDY AT MERUVAMBA', 'R AYROOR AT AYROOR BRIDGE']\n","['7.5', '7.4', '7.5', '7.5', '6.9', '6.7', '6.9']\n"]}]},{"cell_type":"code","source":["\n","# Creating plot\n","fig = plt.figure(figsize =(10, 7))\n","plt.pie(data, labels = cars)\n"," \n","# show plot\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":411},"id":"c1D3QmYCAN1l","executionInfo":{"status":"ok","timestamp":1659501945313,"user_tz":-330,"elapsed":13,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"530e27a6-dda9-4dd1-f658-c590b38ed0a2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x504 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#16. Corr()\n"],"metadata":{"id":"KQfU-9GOWF_5"}},{"cell_type":"markdown","source":["You can use the pandas corr () function to get the correlation between columns of a dataframe."],"metadata":{"id":"bK49v-ssWIc8"}},{"cell_type":"code","source":["import pandas as pd\n","chart = {'Name':['Chetan','yashas','yuvraj'],'Age':  [20,25,30],'Height': [155,160,175],'Weight': [55,60,75]}\n","df = pd.DataFrame(chart)\n","print(df)\n","print(df.corr(method='kendall'))"],"metadata":{"id":"C_y8B297QhEm","executionInfo":{"status":"ok","timestamp":1659501643951,"user_tz":-330,"elapsed":637,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"97568b24-331e-4cd2-c3a9-f9f47fd68a8f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Name  Age  Height  Weight\n","0  Chetan   20     155      55\n","1  yashas   25     160      60\n","2  yuvraj   30     175      75\n","        Age  Height  Weight\n","Age     1.0     1.0     1.0\n","Height  1.0     1.0     1.0\n","Weight  1.0     1.0     1.0\n"]}]},{"cell_type":"markdown","source":["#17. SimpleImputer()"],"metadata":{"id":"O08V3Hd-WHw5"}},{"cell_type":"markdown","source":["SimpleImputer is a scikit-learn class which is helpful in handling the missing data in the predictive model dataset. It replaces the NaN values with a specified placeholder"],"metadata":{"id":"Jxcult4TWSYl"}},{"cell_type":"code","source":["from sklearn.impute import SimpleImputer\n","dfstd=data_set\n","imputer = SimpleImputer(missing_values=np.NaN, strategy='mean')\n","dfstd.Temp = imputer.fit_transform(dfstd['Temp'].values.reshape(-1,1))[:,0]"],"metadata":{"id":"KsyEherUU8eP","executionInfo":{"status":"error","timestamp":1659501648950,"user_tz":-330,"elapsed":6,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"colab":{"base_uri":"https://localhost:8080/","height":363},"outputId":"db81d09e-3243-4f81-9c15-4b8c90c01dce"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-e0aaec6a90ba>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mdfstd\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata_set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mimputer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSimpleImputer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmissing_values\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNaN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstrategy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'mean'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mdfstd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTemp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimputer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdfstd\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Temp'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    850\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    851\u001b[0m             \u001b[0;31m# fit method of arity 1 (unsupervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 852\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    853\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m             \u001b[0;31m# fit method of arity 2 (supervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/impute/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    317\u001b[0m             \u001b[0mFitted\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    318\u001b[0m         \"\"\"\n\u001b[0;32m--> 319\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0min_fit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m         \u001b[0;31m# default fill_value is 0 for numerical input and \"missing_value\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/impute/_base.py\u001b[0m in \u001b[0;36m_validate_input\u001b[0;34m(self, X, in_fit)\u001b[0m\n\u001b[1;32m    283\u001b[0m                     )\n\u001b[1;32m    284\u001b[0m                 )\n\u001b[0;32m--> 285\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mnew_ve\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    286\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mve\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Cannot use mean strategy with non-numeric data:\ncould not convert string to float: "]}]},{"cell_type":"code","source":["from sklearn.impute import SimpleImputer\n","dfstd=data_set\n","imputer = SimpleImputer(missing_values=None, strategy='most_frequent')\n","dfstd.STATE = imputer.fit_transform(dfstd['STATE'].values.reshape(-1,1))[:,0]\n","dfstd"],"metadata":{"id":"3tSL5svYTSHU","executionInfo":{"status":"ok","timestamp":1659501662776,"user_tz":-330,"elapsed":413,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"colab":{"base_uri":"https://localhost:8080/","height":606},"outputId":"0c583567-4f74-424e-c376-2f4094040b67"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     STATION CODE                                          LOCATIONS  \\\n","0            1393               DAMANGANGA AT D/S OF MADHUBAN, DAMAN   \n","1            1399  ZUARI AT D/S OF PT. WHERE KUMBARJRIA CANAL JOI...   \n","2            1475                                ZUARI AT PANCHAWADI   \n","3            3181                        RIVER ZUARI AT BORIM BRIDGE   \n","4            3182                       RIVER ZUARI AT MARCAIM JETTY   \n","...           ...                                                ...   \n","1986         1330            TAMBIRAPARANI AT ARUMUGANERI, TAMILNADU   \n","1987         1450  PALAR AT VANIYAMBADI WATER SUPPLY HEAD WORK, T...   \n","1988         1403                 GUMTI AT U/S SOUTH TRIPURA,TRIPURA   \n","1989         1404                GUMTI AT D/S SOUTH TRIPURA, TRIPURA   \n","1990         1726   CHANDRAPUR, AGARTALA D/S OF HAORA RIVER, TRIPURA   \n","\n","            STATE  Temp D.O. (mg/l)   PH CONDUCTIVITY (µmhos/cm)  \\\n","0     DAMAN & DIU  30.6         6.7  7.5                     203   \n","1             GOA  29.8         5.7  7.2                     189   \n","2             GOA  29.5         6.3  6.9                     179   \n","3             GOA  29.7         5.8  6.9                      64   \n","4             GOA  29.5         5.8  7.3                      83   \n","...           ...   ...         ...  ...                     ...   \n","1986          NAN   NAN         7.9  738                     7.2   \n","1987          NAN    29         7.5  585                     6.3   \n","1988          NAN    28         7.6   98                     6.2   \n","1989          NAN    28         7.7   91                     6.5   \n","1990          NAN    29         7.6  110                     5.7   \n","\n","     B.O.D. (mg/l) NITRATENAN N+ NITRITENANN (mg/l)  \\\n","0              NAN                              0.1   \n","1                2                              0.2   \n","2              1.7                              0.1   \n","3              3.8                              0.5   \n","4              1.9                              0.4   \n","...            ...                              ...   \n","1986           2.7                            0.518   \n","1987           2.6                            0.155   \n","1988           1.2                              NAN   \n","1989           1.3                              NAN   \n","1990           1.1                              NAN   \n","\n","     FECAL COLIFORM (MPN/100ml) TOTAL COLIFORM (MPN/100ml)Mean  year  \n","0                            11                             27  2014  \n","1                          4953                           8391  2014  \n","2                          3243                           5330  2014  \n","3                          5382                           8443  2014  \n","4                          3428                           5500  2014  \n","...                         ...                            ...   ...  \n","1986                      0.518                            202  2003  \n","1987                      0.155                            315  2003  \n","1988                        NAN                            570  2003  \n","1989                        NAN                            562  2003  \n","1990                        NAN                            546  2003  \n","\n","[1991 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-8c8f4901-ec2c-4dc4-970b-f37f467273f1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATION CODE</th>\n","      <th>LOCATIONS</th>\n","      <th>STATE</th>\n","      <th>Temp</th>\n","      <th>D.O. (mg/l)</th>\n","      <th>PH</th>\n","      <th>CONDUCTIVITY (µmhos/cm)</th>\n","      <th>B.O.D. (mg/l)</th>\n","      <th>NITRATENAN N+ NITRITENANN (mg/l)</th>\n","      <th>FECAL COLIFORM (MPN/100ml)</th>\n","      <th>TOTAL COLIFORM (MPN/100ml)Mean</th>\n","      <th>year</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1393</td>\n","      <td>DAMANGANGA AT D/S OF MADHUBAN, DAMAN</td>\n","      <td>DAMAN &amp; DIU</td>\n","      <td>30.6</td>\n","      <td>6.7</td>\n","      <td>7.5</td>\n","      <td>203</td>\n","      <td>NAN</td>\n","      <td>0.1</td>\n","      <td>11</td>\n","      <td>27</td>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1399</td>\n","      <td>ZUARI AT D/S OF PT. WHERE KUMBARJRIA CANAL JOI...</td>\n","      <td>GOA</td>\n","      <td>29.8</td>\n","      <td>5.7</td>\n","      <td>7.2</td>\n","      <td>189</td>\n","      <td>2</td>\n","      <td>0.2</td>\n","      <td>4953</td>\n","      <td>8391</td>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1475</td>\n","      <td>ZUARI AT PANCHAWADI</td>\n","      <td>GOA</td>\n","      <td>29.5</td>\n","      <td>6.3</td>\n","      <td>6.9</td>\n","      <td>179</td>\n","      <td>1.7</td>\n","      <td>0.1</td>\n","      <td>3243</td>\n","      <td>5330</td>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3181</td>\n","      <td>RIVER ZUARI AT BORIM BRIDGE</td>\n","      <td>GOA</td>\n","      <td>29.7</td>\n","      <td>5.8</td>\n","      <td>6.9</td>\n","      <td>64</td>\n","      <td>3.8</td>\n","      <td>0.5</td>\n","      <td>5382</td>\n","      <td>8443</td>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3182</td>\n","      <td>RIVER ZUARI AT MARCAIM JETTY</td>\n","      <td>GOA</td>\n","      <td>29.5</td>\n","      <td>5.8</td>\n","      <td>7.3</td>\n","      <td>83</td>\n","      <td>1.9</td>\n","      <td>0.4</td>\n","      <td>3428</td>\n","      <td>5500</td>\n","      <td>2014</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1986</th>\n","      <td>1330</td>\n","      <td>TAMBIRAPARANI AT ARUMUGANERI, TAMILNADU</td>\n","      <td>NAN</td>\n","      <td>NAN</td>\n","      <td>7.9</td>\n","      <td>738</td>\n","      <td>7.2</td>\n","      <td>2.7</td>\n","      <td>0.518</td>\n","      <td>0.518</td>\n","      <td>202</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>1987</th>\n","      <td>1450</td>\n","      <td>PALAR AT VANIYAMBADI WATER SUPPLY HEAD WORK, T...</td>\n","      <td>NAN</td>\n","      <td>29</td>\n","      <td>7.5</td>\n","      <td>585</td>\n","      <td>6.3</td>\n","      <td>2.6</td>\n","      <td>0.155</td>\n","      <td>0.155</td>\n","      <td>315</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>1988</th>\n","      <td>1403</td>\n","      <td>GUMTI AT U/S SOUTH TRIPURA,TRIPURA</td>\n","      <td>NAN</td>\n","      <td>28</td>\n","      <td>7.6</td>\n","      <td>98</td>\n","      <td>6.2</td>\n","      <td>1.2</td>\n","      <td>NAN</td>\n","      <td>NAN</td>\n","      <td>570</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>1989</th>\n","      <td>1404</td>\n","      <td>GUMTI AT D/S SOUTH TRIPURA, TRIPURA</td>\n","      <td>NAN</td>\n","      <td>28</td>\n","      <td>7.7</td>\n","      <td>91</td>\n","      <td>6.5</td>\n","      <td>1.3</td>\n","      <td>NAN</td>\n","      <td>NAN</td>\n","      <td>562</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>1990</th>\n","      <td>1726</td>\n","      <td>CHANDRAPUR, AGARTALA D/S OF HAORA RIVER, TRIPURA</td>\n","      <td>NAN</td>\n","      <td>29</td>\n","      <td>7.6</td>\n","      <td>110</td>\n","      <td>5.7</td>\n","      <td>1.1</td>\n","      <td>NAN</td>\n","      <td>NAN</td>\n","      <td>546</td>\n","      <td>2003</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1991 rows × 12 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c8f4901-ec2c-4dc4-970b-f37f467273f1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8c8f4901-ec2c-4dc4-970b-f37f467273f1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8c8f4901-ec2c-4dc4-970b-f37f467273f1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":[""],"metadata":{"id":"sQcsL5EtcHfw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"-Ujjglz-cH9L"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#KNN"],"metadata":{"id":"V8OIEcEhcOK5"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import f1_score"],"metadata":{"id":"DlNVo8TecpPC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Import necessary modules\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.datasets import load_iris\n","import numpy as np\n","import matplotlib.pyplot as plt\n"," \n","data_set= pd.read_csv('city_day.csv',encoding='cp1252').dropna()\n","data_set\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"18CK2voPDj73","executionInfo":{"status":"ok","timestamp":1659502901336,"user_tz":-330,"elapsed":812,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"fd636b6e-1058-4bfc-a997-23902c7b5002"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                City        Date  PM2.5    PM10    NO    NO2    NOx    NH3  \\\n","2123       Amaravati  2017-11-25  81.40  124.50  1.44  20.50  12.08  10.72   \n","2124       Amaravati  2017-11-26  78.32  129.06  1.26  26.00  14.85  10.28   \n","2125       Amaravati  2017-11-27  88.76  135.32  6.60  30.85  21.77  12.91   \n","2126       Amaravati  2017-11-28  64.18  104.09  2.56  28.07  17.01  11.42   \n","2127       Amaravati  2017-11-29  72.47  114.84  5.23  23.20  16.59  12.25   \n","...              ...         ...    ...     ...   ...    ...    ...    ...   \n","29525  Visakhapatnam  2020-06-26   7.63   32.27  5.91  23.27  17.19  11.15   \n","29526  Visakhapatnam  2020-06-27  15.02   50.94  7.68  25.06  19.54  12.47   \n","29527  Visakhapatnam  2020-06-28  24.38   74.09  3.42  26.06  16.53  11.99   \n","29528  Visakhapatnam  2020-06-29  22.91   65.73  3.45  29.53  18.33  10.71   \n","29529  Visakhapatnam  2020-06-30  16.64   49.97  4.05  29.26  18.80  10.03   \n","\n","         CO    SO2      O3  Benzene  Toluene  Xylene    AQI    AQI_Bucket  \n","2123   0.12  15.24  127.09     0.20     6.50    0.06  184.0      Moderate  \n","2124   0.14  26.96  117.44     0.22     7.95    0.08  197.0      Moderate  \n","2125   0.11  33.59  111.81     0.29     7.63    0.12  198.0      Moderate  \n","2126   0.09  19.00  138.18     0.17     5.02    0.07  188.0      Moderate  \n","2127   0.16  10.55  109.74     0.21     4.71    0.08  173.0      Moderate  \n","...     ...    ...     ...      ...      ...     ...    ...           ...  \n","29525  0.46   6.87   19.90     1.45     5.37    1.45   47.0          Good  \n","29526  0.47   8.55   23.30     2.24    12.07    0.73   41.0          Good  \n","29527  0.52  12.72   30.14     0.74     2.21    0.38   70.0  Satisfactory  \n","29528  0.48   8.42   30.96     0.01     0.01    0.00   68.0  Satisfactory  \n","29529  0.52   9.84   28.30     0.00     0.00    0.00   54.0  Satisfactory  \n","\n","[6236 rows x 16 columns]"],"text/html":["\n","  <div id=\"df-f12e1c1a-0f5b-498d-ace2-9da0b5d7015c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>City</th>\n","      <th>Date</th>\n","      <th>PM2.5</th>\n","      <th>PM10</th>\n","      <th>NO</th>\n","      <th>NO2</th>\n","      <th>NOx</th>\n","      <th>NH3</th>\n","      <th>CO</th>\n","      <th>SO2</th>\n","      <th>O3</th>\n","      <th>Benzene</th>\n","      <th>Toluene</th>\n","      <th>Xylene</th>\n","      <th>AQI</th>\n","      <th>AQI_Bucket</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2123</th>\n","      <td>Amaravati</td>\n","      <td>2017-11-25</td>\n","      <td>81.40</td>\n","      <td>124.50</td>\n","      <td>1.44</td>\n","      <td>20.50</td>\n","      <td>12.08</td>\n","      <td>10.72</td>\n","      <td>0.12</td>\n","      <td>15.24</td>\n","      <td>127.09</td>\n","      <td>0.20</td>\n","      <td>6.50</td>\n","      <td>0.06</td>\n","      <td>184.0</td>\n","      <td>Moderate</td>\n","    </tr>\n","    <tr>\n","      <th>2124</th>\n","      <td>Amaravati</td>\n","      <td>2017-11-26</td>\n","      <td>78.32</td>\n","      <td>129.06</td>\n","      <td>1.26</td>\n","      <td>26.00</td>\n","      <td>14.85</td>\n","      <td>10.28</td>\n","      <td>0.14</td>\n","      <td>26.96</td>\n","      <td>117.44</td>\n","      <td>0.22</td>\n","      <td>7.95</td>\n","      <td>0.08</td>\n","      <td>197.0</td>\n","      <td>Moderate</td>\n","    </tr>\n","    <tr>\n","      <th>2125</th>\n","      <td>Amaravati</td>\n","      <td>2017-11-27</td>\n","      <td>88.76</td>\n","      <td>135.32</td>\n","      <td>6.60</td>\n","      <td>30.85</td>\n","      <td>21.77</td>\n","      <td>12.91</td>\n","      <td>0.11</td>\n","      <td>33.59</td>\n","      <td>111.81</td>\n","      <td>0.29</td>\n","      <td>7.63</td>\n","      <td>0.12</td>\n","      <td>198.0</td>\n","      <td>Moderate</td>\n","    </tr>\n","    <tr>\n","      <th>2126</th>\n","      <td>Amaravati</td>\n","      <td>2017-11-28</td>\n","      <td>64.18</td>\n","      <td>104.09</td>\n","      <td>2.56</td>\n","      <td>28.07</td>\n","      <td>17.01</td>\n","      <td>11.42</td>\n","      <td>0.09</td>\n","      <td>19.00</td>\n","      <td>138.18</td>\n","      <td>0.17</td>\n","      <td>5.02</td>\n","      <td>0.07</td>\n","      <td>188.0</td>\n","      <td>Moderate</td>\n","    </tr>\n","    <tr>\n","      <th>2127</th>\n","      <td>Amaravati</td>\n","      <td>2017-11-29</td>\n","      <td>72.47</td>\n","      <td>114.84</td>\n","      <td>5.23</td>\n","      <td>23.20</td>\n","      <td>16.59</td>\n","      <td>12.25</td>\n","      <td>0.16</td>\n","      <td>10.55</td>\n","      <td>109.74</td>\n","      <td>0.21</td>\n","      <td>4.71</td>\n","      <td>0.08</td>\n","      <td>173.0</td>\n","      <td>Moderate</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>29525</th>\n","      <td>Visakhapatnam</td>\n","      <td>2020-06-26</td>\n","      <td>7.63</td>\n","      <td>32.27</td>\n","      <td>5.91</td>\n","      <td>23.27</td>\n","      <td>17.19</td>\n","      <td>11.15</td>\n","      <td>0.46</td>\n","      <td>6.87</td>\n","      <td>19.90</td>\n","      <td>1.45</td>\n","      <td>5.37</td>\n","      <td>1.45</td>\n","      <td>47.0</td>\n","      <td>Good</td>\n","    </tr>\n","    <tr>\n","      <th>29526</th>\n","      <td>Visakhapatnam</td>\n","      <td>2020-06-27</td>\n","      <td>15.02</td>\n","      <td>50.94</td>\n","      <td>7.68</td>\n","      <td>25.06</td>\n","      <td>19.54</td>\n","      <td>12.47</td>\n","      <td>0.47</td>\n","      <td>8.55</td>\n","      <td>23.30</td>\n","      <td>2.24</td>\n","      <td>12.07</td>\n","      <td>0.73</td>\n","      <td>41.0</td>\n","      <td>Good</td>\n","    </tr>\n","    <tr>\n","      <th>29527</th>\n","      <td>Visakhapatnam</td>\n","      <td>2020-06-28</td>\n","      <td>24.38</td>\n","      <td>74.09</td>\n","      <td>3.42</td>\n","      <td>26.06</td>\n","      <td>16.53</td>\n","      <td>11.99</td>\n","      <td>0.52</td>\n","      <td>12.72</td>\n","      <td>30.14</td>\n","      <td>0.74</td>\n","      <td>2.21</td>\n","      <td>0.38</td>\n","      <td>70.0</td>\n","      <td>Satisfactory</td>\n","    </tr>\n","    <tr>\n","      <th>29528</th>\n","      <td>Visakhapatnam</td>\n","      <td>2020-06-29</td>\n","      <td>22.91</td>\n","      <td>65.73</td>\n","      <td>3.45</td>\n","      <td>29.53</td>\n","      <td>18.33</td>\n","      <td>10.71</td>\n","      <td>0.48</td>\n","      <td>8.42</td>\n","      <td>30.96</td>\n","      <td>0.01</td>\n","      <td>0.01</td>\n","      <td>0.00</td>\n","      <td>68.0</td>\n","      <td>Satisfactory</td>\n","    </tr>\n","    <tr>\n","      <th>29529</th>\n","      <td>Visakhapatnam</td>\n","      <td>2020-06-30</td>\n","      <td>16.64</td>\n","      <td>49.97</td>\n","      <td>4.05</td>\n","      <td>29.26</td>\n","      <td>18.80</td>\n","      <td>10.03</td>\n","      <td>0.52</td>\n","      <td>9.84</td>\n","      <td>28.30</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>54.0</td>\n","      <td>Satisfactory</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6236 rows × 16 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f12e1c1a-0f5b-498d-ace2-9da0b5d7015c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f12e1c1a-0f5b-498d-ace2-9da0b5d7015c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f12e1c1a-0f5b-498d-ace2-9da0b5d7015c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["x=data_set[[\"CO\",\"PM2.5\",\"PM10\"]].head(50)\n","y=data_set[\"AQI_Bucket\"].head(50)"],"metadata":{"id":"9BDEcWZ0E_qJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#verypoor =1 poor=2 Moderate=3 satisfactory=4 good=5 severe=0\n","kvalues={'Moderate':3, 'Poor':2, 'Very Poor':1, 'Satisfactory':4, 'Good':5, 'Severe':0}"],"metadata":{"id":"Se0YuVotFWql"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y1=[]\n","for i in y:\n","  y1.append(kvalues[i])\n","  print(kvalues[i])\n","print(len(y1)) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l4UvOa37JxTZ","executionInfo":{"status":"ok","timestamp":1659504473046,"user_tz":-330,"elapsed":18,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"25eb7c4b-51a6-40d6-d4ae-1dcfd0b14098"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","2\n","3\n","3\n","2\n","2\n","1\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","2\n","2\n","2\n","2\n","3\n","3\n","3\n","2\n","2\n","2\n","2\n","2\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","2\n","2\n","2\n","2\n","2\n","2\n","2\n","2\n","2\n","50\n"]}]},{"cell_type":"code","source":["y1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"46rtclTVKbBc","executionInfo":{"status":"ok","timestamp":1659504475742,"user_tz":-330,"elapsed":10,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"a5b671ad-6690-430e-acc7-812d51884926"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 2,\n"," 3,\n"," 3,\n"," 2,\n"," 2,\n"," 1,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 2,\n"," 2,\n"," 2,\n"," 2,\n"," 3,\n"," 3,\n"," 3,\n"," 2,\n"," 2,\n"," 2,\n"," 2,\n"," 2,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 3,\n"," 2,\n"," 2,\n"," 2,\n"," 2,\n"," 2,\n"," 2,\n"," 2,\n"," 2,\n"," 2]"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["# Split into training and test set\n","X_train, X_test, y_train, y_test = train_test_split(\n","             x, y1, test_size = 0.2, random_state=42)\n"," \n","knn = KNeighborsClassifier(n_neighbors=7)\n","knn\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NM0Iut4JHDtm","executionInfo":{"status":"ok","timestamp":1659504478845,"user_tz":-330,"elapsed":515,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"ac1d2b9b-c73f-4792-bce4-a7ea47e9a79d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(n_neighbors=7)"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["knn.fit(X_train, y_train)\n"," \n","# Calculate the accuracy of the model\n","print(knn.score(X_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"djj2G9KxK1Rl","executionInfo":{"status":"ok","timestamp":1659504481913,"user_tz":-330,"elapsed":416,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"df42780a-42ae-483d-8e01-400508b70168"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.7\n"]}]},{"cell_type":"code","source":["y_train[:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ia9B-lCHGzKa","executionInfo":{"status":"ok","timestamp":1659504957283,"user_tz":-330,"elapsed":4,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"82e7bf8e-7500-4559-fecc-a22c039c452f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 3, 3, 2, 3, 3, 2, 2, 2, 3]"]},"metadata":{},"execution_count":84}]},{"cell_type":"code","source":["X_train[:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"gzAVqkPBNCZU","executionInfo":{"status":"ok","timestamp":1659504972790,"user_tz":-330,"elapsed":484,"user":{"displayName":"CHRISTY ALEX 2147215","userId":"09524655227175743010"}},"outputId":"39a74db9-737b-43d4-ce1b-2141c6494aba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        CO   PM2.5    PM10\n","2135  0.13  117.46  181.64\n","2127  0.16   72.47  114.84\n","2160  0.09   59.03  108.83\n","2131  0.15   87.14  130.52\n","2126  0.09   64.18  104.09\n","2129  0.10   73.96  113.56\n","2164  0.08   92.90  162.69\n","2169  0.10   87.43  155.95\n","2170  0.08   87.33  153.97\n","2138  0.10   50.32  102.77"],"text/html":["\n","  <div id=\"df-e76ef77a-1c50-4bf6-959e-2dbd58be5f00\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CO</th>\n","      <th>PM2.5</th>\n","      <th>PM10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2135</th>\n","      <td>0.13</td>\n","      <td>117.46</td>\n","      <td>181.64</td>\n","    </tr>\n","    <tr>\n","      <th>2127</th>\n","      <td>0.16</td>\n","      <td>72.47</td>\n","      <td>114.84</td>\n","    </tr>\n","    <tr>\n","      <th>2160</th>\n","      <td>0.09</td>\n","      <td>59.03</td>\n","      <td>108.83</td>\n","    </tr>\n","    <tr>\n","      <th>2131</th>\n","      <td>0.15</td>\n","      <td>87.14</td>\n","      <td>130.52</td>\n","    </tr>\n","    <tr>\n","      <th>2126</th>\n","      <td>0.09</td>\n","      <td>64.18</td>\n","      <td>104.09</td>\n","    </tr>\n","    <tr>\n","      <th>2129</th>\n","      <td>0.10</td>\n","      <td>73.96</td>\n","      <td>113.56</td>\n","    </tr>\n","    <tr>\n","      <th>2164</th>\n","      <td>0.08</td>\n","      <td>92.90</td>\n","      <td>162.69</td>\n","    </tr>\n","    <tr>\n","      <th>2169</th>\n","      <td>0.10</td>\n","      <td>87.43</td>\n","      <td>155.95</td>\n","    </tr>\n","    <tr>\n","      <th>2170</th>\n","      <td>0.08</td>\n","      <td>87.33</td>\n","      <td>153.97</td>\n","    </tr>\n","    <tr>\n","      <th>2138</th>\n","      <td>0.10</td>\n","      <td>50.32</td>\n","      <td>102.77</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e76ef77a-1c50-4bf6-959e-2dbd58be5f00')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e76ef77a-1c50-4bf6-959e-2dbd58be5f00 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e76ef77a-1c50-4bf6-959e-2dbd58be5f00');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":85}]}]}